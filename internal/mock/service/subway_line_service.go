// Code generated by MockGen. DO NOT EDIT.
// Source: internal/common/service/subway_line_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "metro-in/internal/common/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubwayLineService is a mock of SubwayLineService interface.
type MockSubwayLineService struct {
	ctrl     *gomock.Controller
	recorder *MockSubwayLineServiceMockRecorder
}

// MockSubwayLineServiceMockRecorder is the mock recorder for MockSubwayLineService.
type MockSubwayLineServiceMockRecorder struct {
	mock *MockSubwayLineService
}

// NewMockSubwayLineService creates a new mock instance.
func NewMockSubwayLineService(ctrl *gomock.Controller) *MockSubwayLineService {
	mock := &MockSubwayLineService{ctrl: ctrl}
	mock.recorder = &MockSubwayLineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubwayLineService) EXPECT() *MockSubwayLineServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockSubwayLineService) GetAll() ([]entity.SubwayLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.SubwayLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubwayLineServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubwayLineService)(nil).GetAll))
}

// GetByCompanyID mocks base method.
func (m *MockSubwayLineService) GetByCompanyID(companyID uint) ([]entity.SubwayLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCompanyID", companyID)
	ret0, _ := ret[0].([]entity.SubwayLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCompanyID indicates an expected call of GetByCompanyID.
func (mr *MockSubwayLineServiceMockRecorder) GetByCompanyID(companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCompanyID", reflect.TypeOf((*MockSubwayLineService)(nil).GetByCompanyID), companyID)
}

// GetByID mocks base method.
func (m *MockSubwayLineService) GetByID(id uint) (entity.SubwayLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(entity.SubwayLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSubwayLineServiceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSubwayLineService)(nil).GetByID), id)
}
